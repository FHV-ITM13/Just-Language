/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(Justy)package fhv;
import java.io.*;

import fhv.symbol.*;
import fhv.code.*;
import fhv.code.fixup.*;
import fhv.classfile.*;
import fhv.classfile.constant.*;
public class Justy{
  private static NameList nameList;
  private static SymbolTable symbolTable;
  private static ClassFile classFile;
  private static CodeGenerator codeGen;
    public static void main(String args []) throws ParseException  {
    nameList = new NameList();
    symbolTable = new SymbolTable(nameList);
    classFile = new ClassFile();
    codeGen = new CodeGenerator();
        try    {      Justy parser = new Justy(new FileInputStream("Just/CTest.jus"));      parser.file();      System.out.println("OK.");
      classFile.write("Just/output.jl");    }    catch (ParseException e)    {      System.out.println("NOK.");      System.out.println(e.getMessage());      Justy.ReInit(System.in);    }    catch (Error e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());      e.printStackTrace();    }    catch (Exception e)    {      System.out.println("Other oops.");      System.out.println(e.getMessage());      e.printStackTrace();    }  }}PARSER_END(Justy)
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN : /*  */
{
  < PROGRAM : "program" >
| < VAR : "var" >
| < CALL : "call" >
| < IMPORT : "import" >
| < RETURN : "return" >
| < BYREF : "byref" >
| < BYVAL : "byval" >
| < COROUTINE : "coroutine" >
| < SYNCHRONIZED : "synchronized" >
| < NEW : "new" >
| < POINT : "." >
| < TRUE : "true" >
| < FALSE : "false" >
| < END : ";" >
| < SEPERATOR : "," >
}

TOKEN :
{
  < OR : "||" >
| < AND : "&&" >
}

TOKEN : /* BRACES */
{
  < OPEN_CURLY : "{" >
| < CLOSE_CURLY : "}" >
| < OPEN : "(" >
| < CLOSE : ")" >
| < OPEN_RECT : "[" >
| < CLOSE_RECT : "]" >
}

TOKEN :
{
  < EQUAL : "==" >
| < NOT_EQUAL : "!=" >
| < SMALLER : "<" >
| < GREATOR : ">" >
| < SMALLER_EQUAL : "<=" >
| < GREATOR_EQUAL : ">=" >
| < NOT : "|" >
}

TOKEN : /* TYPES */
{
  < INT : "int" >
| < BOOL : "boolean" >
| < VOID : "void" >
| < ARRAY : (< OPEN_RECT > < CLOSE_RECT >) >
}

TOKEN : /* IF */
{
  < IF : "if" >
| < ELSE : "else" >
}

TOKEN : /* WHILE */
{
  < DO : "do" >
| < WHILE : "while" >
}

TOKEN : /* ASSIGN OPERATORS */
{
  < ASSIGN : "=" >
}

TOKEN : /* Identifier */
{
  < IDENTIFIER :
    (
      < LOWER_LETTER >
    | < UPPER_LETTER >
    )
    (
      < LOWER_LETTER >
    | < UPPER_LETTER >
    | < NUMBER >
    )* 
    >
| < #LOWER_LETTER : [ "a"-"z" ] >
| < #UPPER_LETTER : [ "A"-"Z" ] >
}

TOKEN : /* Number */
{
  < NUMBER : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

Type type() :
{
}
{
  (
    < VOID >    {
      return Type.Void;    }
  | < INT >
    {
      return Type.Int;
    }
  | < BOOL >
    {
      return Type.Bool;
    }
  )
}void file() :{}{  program()}

void program():{
  Symbol s;
  Constant classConstant;}{
  < PROGRAM >
  token = < IDENTIFIER >
  {
    s = nameList.insert(token.image, Kind.programKind);
    symbolTable.insert(s);
    symbolTable.enterScope("program: " + token.image);
    
	classConstant = classFile.addClassConstant(s);  }
  < OPEN_CURLY >
  (
    fieldVarDef()
  | methodDef()
  )*
  < CLOSE_CURLY >
  {
    symbolTable.leaveScope();  }}

void fieldVarDef():{
  Constant constant;}{
  < VAR >
  constant = varDef(Kind.fieldKind)
  // TODO add assignment (only Constants)
  < END >}

void localVarDef():
{
  Constant constant;}{
  < VAR >
  constant = varDef(Kind.localKind)
  // TODO add assignment
  < END >} 

Constant varDef(Kind kind):{
  Type type;
  Symbol s;
  Constant varConstant;}{
  type = type()
  token = < IDENTIFIER >
  {
    s = nameList.insert(token.image, kind);
    s.setType(type);
    symbolTable.insert(s);
	return classFile.addVarConstant(s);  }}

void methodDef():{
  Type type;
  MethodSymbol s;
  MethodRefConstant methodConstant;
  Scope scope;}{
  type = type()
  token = < IDENTIFIER >
  {
    s = (MethodSymbol) nameList.insert(token.image, Kind.methodKind);
    s.setType(type);
    
    symbolTable.insert(s);
    scope = symbolTable.enterScope(token.image);  }
  < OPEN >
  funcParamList(s)
  < CLOSE >
  {
    methodConstant = (MethodRefConstant) classFile.addMethodConstant(s, scope);
    codeGen.setCurrentCode(methodConstant.getCode());  }
  block()
  {
    symbolTable.leaveScope();  }}

void funcParamList(MethodSymbol s):{}{
  (
    funcParam(s)
    (
      < SEPERATOR > 
      funcParam(s)
    )*
  )?}

void funcParam(MethodSymbol method):{
  Type type;
  Symbol s;}{
  (
    < BYREF >
  | < BYVAL >
  )?
  type = type()
  token = < IDENTIFIER >
  {
    s = nameList.insert(token.image, Kind.paramKind);
    s.setType(type);
    symbolTable.insert(s);

	s.setConstant(classFile.addVarConstant(s));
    method.addParam(s);  }}

void block():{}{
  < OPEN_CURLY >
  (	stat()
  )*
  < CLOSE_CURLY >}

void stat():
{
}
{
  localVarDef()
| assignStat()
| ifStat()
| whileStat()
| returnStat()
}

void ifStat() :
{
  IfDescriptor desc = new IfDescriptor();
  Label endifLabel;
}
{
  < IF >
  < OPEN >
  expr()
  (
    < EQUAL >
    expr()
    {      codeGen.falseJump(Opcode.IF_ICMPNE, desc);
    }
  | < NOT_EQUAL >
    expr()
    {
      codeGen.falseJump(Opcode.IF_ICMPEQ, desc);
    }  )
  < CLOSE >
  block()
  (
    < ELSE >
    {
	  endifLabel = codeGen.createLabel();
	  codeGen.jump(endifLabel);
	  codeGen.markByLabel(desc.getLabel());
    }
    block()    {
  	  codeGen.markByLabel(endifLabel);    }
  | /* no else */
    {
  	  codeGen.markByLabel(desc.getLabel());
    }
  )
}

void whileStat():{
  IfDescriptor desc = new IfDescriptor();
  Label beforeLabel;}{
  {
	beforeLabel = codeGen.createLabel();
	codeGen.markByLabel(beforeLabel);   }
  < WHILE >
  < OPEN >
  expr()
  (
    < EQUAL >
    expr()
    {
      codeGen.falseJump(Opcode.IF_ICMPNE, desc);
    }
  | < NOT_EQUAL >
    expr()
    {
      codeGen.falseJump(Opcode.IF_ICMPEQ, desc);
    }
  )
  < CLOSE >
  block()  {
	codeGen.jump(beforeLabel);
	codeGen.markByLabel(desc.getLabel());  }}

void assignStat():
{
  Descriptor desc;}{
  desc = var(false)
  < ASSIGN >
  expr()
  {
    codeGen.save(desc);  }
  < END >}

void returnStat():
{}{
  < RETURN >
  expr()
  {
    codeGen.emit(Opcode.IRETURN);  }
  < END >}

void expr() :
{
}
{
  orExpr()
}

void orExpr() :
{}
{
  andExpr()
  (
    < OR >
    andExpr()
    {
      codeGen.emit(Opcode.IOR);
    }
  )*
}

void andExpr() :
{}
{
  simpleExpr()
  (
    < AND >
    simpleExpr()    {
      codeGen.emit(Opcode.IAND);    }
  )*
}

void simpleExpr() :
{
  Opcode code;
}
{
  term()
  (
    (
      < PLUS >      {
        code = Opcode.IADD;      }
    | < MINUS >
      {
        code = Opcode.ISUB;
      }
    )
    term()
    {
      codeGen.emit(code);    }
  )*
}

void term() :
{
  Opcode code;
}
{
  notFactor()
  (
    (
      < MULTIPLY >
      {
        code = Opcode.IMUL;
      }
    | < DIVIDE >
      {
        code = Opcode.IDIV;
      }
    )
    notFactor()
    {
      codeGen.emit(code);
    }
  )*
}

void notFactor() :
{
  boolean not = false;
}
{
  (
  < NOT >  {
    not = true;  }
  )?
  factor()  {
    if(not)    {
      codeGen.emit(Opcode.INEG);    }  }
}

void factor():
{
  Constant constant;
}
{
  token = < NUMBER >
  {
    constant = classFile.addValueConstant(token.image, "integer");
    codeGen.emit2(Opcode.LDC_W, constant.getIndex());  }
| var(true)
| simpleCallStat()
| < TRUE >
{
  constant = classFile.addValueConstant("1", "boolean");
  codeGen.emit2(Opcode.LDC_W, constant.getIndex());
}
| < FALSE >
{
  constant = classFile.addValueConstant("0", "boolean");
  codeGen.emit2(Opcode.LDC_W, constant.getIndex());
}
|
  (
    < OPEN > expr() < CLOSE >
  )
}

Descriptor var(boolean generate):
{
  Symbol s;
  Descriptor desc;}{
  token = < IDENTIFIER >
  {
    s = symbolTable.lookup(token.image);
    if(s==null)    {
      s = nameList.insert(token.image, Kind.noneKind);
    }
    desc = codeGen.getDescriptor(s);
    
    if(generate)    {      codeGen.load(desc);
    }
    return desc;  }}

void callStat() :
{}
{
  simpleCallStat()
  < END >
}

void simpleCallStat():
{}
{
  < CALL >
  call()
}

void call() :
{
  Descriptor desc;
}
{
  desc = var(false)
  < OPEN >
  actParamList()
  < CLOSE >
  {
    codeGen.emit2(Opcode.INVOKESTATIC, new VarAddressFixup(desc, symbolTable.getCurScope()));  }
}

void actParamList() :
{}
{
  (
    expr()
    (
      < SEPERATOR > expr()
    )*
  )?
}
